#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>   // Include the mDNS library
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <Adafruit_BMP085.h>
#include <DHT.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// WiFi credentials
const char* ssid = "!eRRor";
const char* password = "vivivivi";
ESP8266WebServer server(80);

// DHT sensor
#define DHTPIN D5
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// BMP180 sensor
Adafruit_BMP085 bmp;

// MQ-2 gas sensor
#define MQ2_AO A0

// Button connected to D6
#define BUTTON_PIN D6

bool dhtOk = false;

int screenNumber = 1; // Start with Screen 1

float temperature = 0;
float humidity = 0;
int air_quality = 0;

// Icon Bitmap (your image) stored in PROGMEM
const unsigned char epd_bitmap_image [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0c, 0x00, 0x30, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x19, 0x18, 0x98, 0x00, 0x00, 0x12, 
  0x3c, 0x48, 0x00, 0x00, 0x12, 0x3c, 0x48, 0x00, 0x00, 0x12, 0x3c, 0x48, 0x00, 0x00, 0x13, 0x3c, 
  0xc8, 0x00, 0x00, 0x09, 0x18, 0x90, 0x00, 0x00, 0x08, 0x18, 0x10, 0x00, 0x00, 0x00, 0x18, 0x00, 
  0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xc3, 0xff, 0xc3, 0x00, 0x00, 0xdf, 0xff, 0xfb, 0x00, 0x00, 
  0xdf, 0x7f, 0xff, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x00, 0x00, 0xf7, 0xff, 0xff, 0x00, 0x00, 0xfe, 
  0x73, 0xff, 0x00, 0x00, 0xfc, 0x40, 0xff, 0x00, 0x00, 0xfc, 0x40, 0xff, 0x00, 0x00, 0xcc, 0xc0, 
  0x0f, 0x00, 0x00, 0xff, 0x00, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x07, 0x00, 0x00, 0xfe, 0x00, 0x07, 
  0x00, 0x00, 0xfe, 0x00, 0x0f, 0x00, 0x00, 0xff, 0x00, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0xdf, 0xff, 0xfb, 0x00, 0x00, 0xdf, 0xff, 0xfb, 0x00, 0x00, 0xc3, 0xff, 0xc3, 0x00, 0x00, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Fan Icon Bitmap stored in PROGMEM (declare outside setup/loop functions)
const unsigned char wifiwifi [] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
	0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xfe, 0x00, 0x7f, 0xf8, 0x3f, 0xf0, 0x00, 0x0f, 
	0xfc, 0x7f, 0xc0, 0x00, 0x03, 0xfe, 0xff, 0x00, 0x00, 0x00, 0xff, 0x7c, 0x00, 0x00, 0x00, 0x3e, 
	0x38, 0x00, 0xff, 0x00, 0x1c, 0x10, 0x07, 0xff, 0xe0, 0x08, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 
	0x3f, 0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xc3, 0xff, 0x00, 0x00, 0xfe, 
	0x00, 0x7f, 0x00, 0x00, 0x78, 0x00, 0x1e, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 
	0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 
	0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Icon Bitmap (your thermometer image) stored in PROGMEM
const unsigned char thermothermometer [] PROGMEM = {
    0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 
	0x03, 0xe7, 0xc0, 0x00, 0x00, 0x03, 0xc3, 0xc0, 0x00, 0x00, 0x07, 0x81, 0xe0, 0x00, 0x00, 0x07, 
	0x81, 0xe0, 0x00, 0x00, 0x07, 0x81, 0xe0, 0x00, 0x00, 0x07, 0x81, 0xe0, 0x00, 0x00, 0x07, 0x81, 
	0xe0, 0x00, 0x00, 0x07, 0x81, 0xe0, 0x00, 0x00, 0x07, 0x81, 0xe0, 0x00, 0x00, 0x07, 0x81, 0xe0, 
	0x00, 0x00, 0x07, 0x99, 0xe0, 0x00, 0x00, 0x07, 0xbd, 0xe0, 0x00, 0x00, 0x07, 0xbd, 0xe0, 0x00, 
	0x00, 0x07, 0xbd, 0xe0, 0x00, 0x00, 0x07, 0xbd, 0xe0, 0x00, 0x00, 0x07, 0xbd, 0xe0, 0x00, 0x00, 
	0x07, 0xbd, 0xe0, 0x00, 0x00, 0x07, 0xbd, 0xe0, 0x00, 0x00, 0x07, 0xbd, 0xe0, 0x00, 0x00, 0x07, 
	0xbd, 0xe0, 0x00, 0x00, 0x0f, 0xbd, 0xf0, 0x00, 0x00, 0x0f, 0x3c, 0xf0, 0x00, 0x00, 0x1e, 0x3c, 
	0x78, 0x00, 0x00, 0x1c, 0xff, 0x38, 0x00, 0x00, 0x3c, 0xff, 0x3c, 0x00, 0x00, 0x3d, 0xff, 0xbc, 
	0x00, 0x00, 0x39, 0xff, 0x9c, 0x00, 0x00, 0x39, 0xff, 0x9c, 0x00, 0x00, 0x3d, 0xff, 0xbc, 0x00, 
	0x00, 0x3c, 0xff, 0x3c, 0x00, 0x00, 0x1c, 0xff, 0x38, 0x00, 0x00, 0x1e, 0x3c, 0x78, 0x00, 0x00, 
	0x0f, 0x00, 0xf0, 0x00, 0x00, 0x0f, 0xe7, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x01, 
	0xff, 0x80, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00
};

// Icon Bitmap (your humidity image) stored in PROGMEM
const unsigned char humidityhumidity [] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x01, 0x80, 0x00, 0x0f, 0xc0, 0x03, 0xc0, 0x00, 0x1e, 
    0xe0, 0x07, 0xc0, 0x00, 0x1c, 0xe0, 0x07, 0xe0, 0x00, 0x38, 0x70, 0x0e, 0x70, 0x00, 0x78, 0x78, 
    0x1c, 0x70, 0x00, 0x70, 0x38, 0x1c, 0x38, 0x00, 0xe0, 0x1c, 0x18, 0x38, 0x00, 0xe0, 0x1c, 0x38, 
    0x18, 0x01, 0xc0, 0x0e, 0x38, 0x18, 0x03, 0x80, 0x07, 0x38, 0x18, 0x03, 0x80, 0x07, 0x1c, 0x38, 
    0x07, 0x00, 0x03, 0x9f, 0xf0, 0x07, 0x00, 0x03, 0x8f, 0xe0, 0x0e, 0x00, 0x01, 0xc3, 0xc0, 0x0e, 
    0x00, 0x01, 0xc0, 0x00, 0x0c, 0x00, 0x00, 0xc0, 0x00, 0x1c, 0x00, 0x38, 0xe7, 0x00, 0x1c, 0x00, 
    0xfe, 0xff, 0xc0, 0x18, 0x03, 0xff, 0xff, 0xf0, 0x18, 0x07, 0xc3, 0xf8, 0x78, 0x18, 0x07, 0x81, 
    0xe0, 0x38, 0x18, 0x00, 0x18, 0x03, 0x00, 0x18, 0x00, 0x7e, 0x0f, 0xc0, 0x1c, 0x01, 0xff, 0x3f, 
    0xe0, 0x1c, 0x07, 0xc7, 0xf8, 0xf8, 0x0e, 0x07, 0x81, 0xf0, 0x38, 0x0e, 0x00, 0x00, 0x00, 0x00, 
    0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x0c, 0x00, 0x00, 0x01, 0xf0, 0x3c, 0x00, 0x00, 0x00, 
    0xff, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Icon Bitmap (your air quality image) stored in PROGMEM
const unsigned char air_qualitywind [] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x04, 0x00, 0x0f, 0x07, 0xc0, 
    0x1e, 0x00, 0x1e, 0x01, 0xe0, 0x3e, 0x00, 0x1c, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0xe0, 
    0x00, 0x00, 0x00, 0x0f, 0xc3, 0xf8, 0x00, 0x03, 0x00, 0x0f, 0xfc, 0x00, 0x03, 0x80, 0x1f, 0x1c, 
    0x00, 0x03, 0xc0, 0x7c, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x01, 
    0xf0, 0x1f, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x1c, 0x00, 0x1e, 0x07, 
    0xc0, 0x3c, 0x00, 0x38, 0x01, 0xe0, 0xf8, 0x00, 0x30, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 
    0xc0, 0x00, 0x00, 0x00, 0x0e, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x03, 0x00, 0x1f, 
    0x3c, 0x00, 0x03, 0x80, 0x3c, 0x00, 0x00, 0x01, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 
    0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Fan Icon Bitmap stored in PROGMEM (declare outside setup/loop functions)
const unsigned char fanfan [] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 
    0x07, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x1f, 
    0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 
    0xff, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xfc, 
    0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x07, 0xe7, 0xc0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 
    0x00, 0x02, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x3e, 0x00, 0x00, 0x1f, 0xc0, 0xff, 0x1f, 0x80, 0x3f, 
    0xe0, 0xff, 0x1f, 0xf0, 0x7f, 0xf8, 0xff, 0x9f, 0xf8, 0x7f, 0xf8, 0xff, 0x9f, 0xfc, 0x7f, 0xfc, 
    0xff, 0x9f, 0xfe, 0x7f, 0xfc, 0xff, 0x1f, 0xfe, 0x7f, 0xfc, 0x7f, 0x3f, 0xfe, 0x7f, 0xfe, 0x3c, 
    0x3f, 0xfe, 0x7f, 0xff, 0x00, 0x7f, 0xfe, 0x3f, 0xff, 0x81, 0xff, 0xfc, 0x3f, 0xff, 0xe1, 0xff, 
    0xfc, 0x1f, 0xff, 0xe1, 0xff, 0xfc, 0x1f, 0xff, 0xc1, 0xff, 0xf8, 0x0f, 0xff, 0xc1, 0xff, 0xf8, 
    0x0f, 0xff, 0x81, 0xff, 0xf0, 0x07, 0xff, 0x01, 0xff, 0xe0, 0x03, 0xff, 0x01, 0xff, 0xc0, 0x01, 
    0xfc, 0x01, 0xff, 0x80, 0x00, 0x78, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



unsigned long lastButtonPress = 0;
const unsigned long debounceDelay = 300; // Debounce time in milliseconds

void setup() {
  Serial.begin(115200);

  // Initialize OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("OLED not found");
    while (true);
  }

  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1);








  // Splash screen display
  display.drawBitmap((SCREEN_WIDTH - 40) / 2, (SCREEN_HEIGHT - 50) / 2, epd_bitmap_image, 40, 40, WHITE);

  // Show the "Weather Station" text at the bottom
  display.setTextSize(1);    // Normal text size
  display.setTextColor(WHITE);
  display.setCursor(20, SCREEN_HEIGHT - 10); // Adjust position to show at the bottom
  display.print("Weather Station");

  display.display(); // Update the display with the above content

  delay(3000);// Splash screen display for 3 seconds










  // Connect to Wi-Fi ------------->>>>>>>
  display.clearDisplay();
  display.drawBitmap((SCREEN_WIDTH - 40) / 2, (SCREEN_HEIGHT - 60) / 2, wifiwifi, 40, 40, WHITE);
  
  display.setTextSize(1);    // Larger text size
  display.setTextColor(WHITE);
  
  display.setCursor((SCREEN_WIDTH - 120) / 2, SCREEN_HEIGHT - 20); // Adjust position to show at the bottom center
  display.print("   Connecting...."); 
  display.display();


  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.print("Connected! IP: ");
  Serial.println(WiFi.localIP());

  display.clearDisplay();
 
  display.drawBitmap((SCREEN_WIDTH - 40) / 2, (SCREEN_HEIGHT - 60) / 2, wifiwifi, 40, 40, WHITE);
  
  display.setTextSize(1);    // Larger text size
  display.setTextColor(WHITE);
  
  display.setCursor((SCREEN_WIDTH - 120) / 2, SCREEN_HEIGHT - 20); // Adjust position to show at the bottom center
  display.print("   WiFi Connected!"); 
  display.print("    IP: ");
  display.println(WiFi.localIP());
  display.display();
  delay(4000); // Display Wi-Fi connection status for 4 seconds











  // // Start mDNS with a hostname (e.g., "esp8266")
  // if (!MDNS.begin("esp8266")) {
  //   Serial.println("Error setting up mDNS responder");
  //   while (1) { delay(1000); }
  // }
  // Serial.println("mDNS responder started");

  // Init sensors
  dht.begin();

  // Web server routes
  server.on("/", handleRoot);
  server.on("/sensor", handleSensor);  // API endpoint
  server.begin();


  // Setup button pin
  pinMode(BUTTON_PIN, INPUT_PULLUP); // Set D6 as input with pull-up resistor
  temperature = dht.readTemperature();
  updateScreen();  // <- This line ensures screen 1 is shown on boot

}




void loop() {
  // Read sensors
  humidity = dht.readHumidity();
  temperature = dht.readTemperature();
  dhtOk = !(isnan(humidity) || isnan(temperature));
  air_quality = analogRead(MQ2_AO);
   
   // Read button state
  if (digitalRead(BUTTON_PIN) == LOW) { // Button pressed (LOW when pressed)
    unsigned long currentMillis = millis();
    if (currentMillis - lastButtonPress > debounceDelay) { // Check for debounce
      lastButtonPress = currentMillis;
      screenNumber++; // Switch to next screen
      if (screenNumber > 5) screenNumber = 1; // If at Screen 4, go back to Screen 1
      updateScreen();
    }
  }
  updateScreen();
  server.handleClient();
  delay(100);
}

// Function to update the screen based on the current screen number
void updateScreen() {
  display.clearDisplay(); // Clear the previous screen

  switch (screenNumber) {
    case 1:
        // Draw the thermometer icon on the left-center of the screen
        display.drawBitmap(0, (SCREEN_HEIGHT - 30) / 2, thermothermometer, 40, 40, WHITE);

        // Show the sensor reading on the right-center
        display.setTextSize(2);    // Larger text size for sensor reading
        display.setTextColor(WHITE);
        display.setCursor(SCREEN_WIDTH - 80, (SCREEN_HEIGHT - 16) / 2); // Adjust position to show on the right side
        display.print(temperature, 1);
        
        display.print(" C"); // Example sensor reading (you can replace this with your sensor value)

        display.display(); // Update the display with the above content
      break;




    case 2:
      // Draw the humidity icon on the left-center of the screen
      display.drawBitmap(0, (SCREEN_HEIGHT - 40) / 2, humidityhumidity, 40, 40, WHITE);

      // Show the humidity sensor reading on the right-center
      display.setTextSize(2);    // Larger text size for sensor reading
      display.setTextColor(WHITE);
      display.setCursor(SCREEN_WIDTH - 80, (SCREEN_HEIGHT - 16) / 2); // Adjust position to show on the right side
      display.print(humidity,1); // Example humidity reading (you can replace this with your sensor value)
      display.print(" %");
      display.display(); // Update the display with the above content
      break;


    case 3:
      // Draw the wind icon (air quality) on the left-center of the screen
      display.drawBitmap(0, (SCREEN_HEIGHT - 40) / 2, air_qualitywind, 40, 40, WHITE);

      // Show the air quality sensor reading on the right-center
      display.setTextSize(3);    // Larger text size for sensor reading
      display.setTextColor(WHITE);
      display.setCursor(SCREEN_WIDTH - 70, (SCREEN_HEIGHT - 16) / 2); // Adjust position to show on the right side
      display.print(air_quality); // Example air quality reading (replace with actual value)

      display.display(); // Update the display with the above content
      break;



    case 4:
      display.drawBitmap((SCREEN_WIDTH - 40) / 2, (SCREEN_HEIGHT - 60) / 2, wifiwifi, 40, 40, WHITE);
  
      display.setTextSize(1);    // Larger text size
      display.setTextColor(WHITE);
  
      display.setCursor((SCREEN_WIDTH - 120) / 2, SCREEN_HEIGHT - 20); // Adjust position to show at the bottom center
      display.print(" IP: ");
      display.println(WiFi.localIP());
      display.display();
      break;


    case 5:
      display.setTextSize(1);    // Larger text size
      display.setTextColor(WHITE);
      display.setCursor(0, 0);
      display.setTextSize(1);
      display.println("Detailed Veiw :-");
      display.setCursor(0, 15);
      display.print("Temp: ");
      display.print(temperature);
      display.print(" C");
      display.setCursor(0, 25);
      display.print("Humidity: ");
      display.print(humidity);
      display.print(" %");
      display.setCursor(0, 35);
      display.print("Air Q.: ");
      display.print(air_quality);
      display.print(" /1023");
      display.setCursor(0, 45);
      display.print("IP: ");
      display.println(WiFi.localIP());
      display.display();
      break;

    default:
      break;
  }
}


void handleRoot() {
  String html = "<!DOCTYPE html><html lang='en'><head><meta charset='UTF-8'>";
  html += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
  html += "<meta name='description' content='ESP8266 Weather Station API for monitoring environmental data'>";
  html += "<title>ESP8266 Weather Station API</title>";
  html += "<link href='https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Source+Code+Pro:wght@400;600&display=swap' rel='stylesheet'>";
  html += "<style>";
  html += "body{font-family:'Roboto',sans-serif;background-color:#1d1f21;color:#dcdcdc;line-height:1.6;font-size:18px;height:100vh;padding:40px 0;display:flex;justify-content:center;align-items:flex-start;}";
  html += ".container{width:80%;max-width:1200px;background:#282c34;border-radius:15px;padding:40px;box-shadow:0 15px 50px rgba(0,0,0,0.2);}";
  html += "header{text-align:center;margin-bottom:60px;padding-bottom:20px;border-bottom:2px solid #444;}";
  html += "header h1{font-size:3.5em;font-weight:700;color:#2196F3;letter-spacing:2px;margin-bottom:10px;}";
  html += "header p{font-size:1.3em;color:#b0b0b0;}";
  html += "nav{background-color:#333;color:white;display:flex;justify-content:center;align-items:center;border-radius:8px;margin:0 0 60px;}";
  html += "nav a{padding:15px 30px;font-size:1.1em;color:white;text-decoration:none;transition:all 0.3s ease-in-out;}";
  html += "nav a:hover{background-color:#2196F3;color:white;border-radius:5px;}";
  html += "section{margin-bottom:60px;}";
  html += ".intro h2,.about h2,.resources h2,.routes h2{font-size:2.5em;font-weight:600;color:#fff;margin-bottom:20px;text-transform:uppercase;}";
  html += ".intro p,.about p{font-size:1.3em;color:#b0b0b0;line-height:1.8;margin-bottom:40px;}";
  html += ".intro .btn,.resources .btn{padding:15px 30px;font-size:1.2em;color:white;background-color:#2196F3;text-decoration:none;border-radius:5px;transition:all 0.3s ease-in-out;margin:10px 5px;display:inline-block;}";
  html += ".intro .btn:hover,.resources .btn:hover{background-color:#1976D2;transform:scale(1.05);}";
  html += ".resources ul,.routes ul{list-style-type:none;padding:0;}";
  html += ".resources ul li,.routes ul li{padding:12px 0;font-size:1.2em;color:#ddd;display:flex;justify-content:space-between;align-items:center;border-bottom:1px solid #444;}";
  html += ".resources ul li a,.routes ul li a{color:#2196F3;text-decoration:none;transition:color 0.3s ease-in-out;}";
  html += ".resources ul li a:hover,.routes ul li a:hover{text-decoration:underline;}";
  html += "footer{background-color:#333;color:#fff;text-align:center;padding:30px 0;margin-top:60px;border-radius:8px;box-shadow:0 10px 30px rgba(0,0,0,0.1);}";
  html += "footer a{color:#2196F3;text-decoration:none;transition:color 0.3s ease-in-out;}";
  html += "footer a:hover{color:#fff;}";
  html += ".footer-links{margin-top:20px;display:flex;justify-content:center;gap:20px;}";
  html += ".footer-links a{padding:10px;border:2px solid #2196F3;border-radius:5px;transition:background-color 0.3s ease-in-out;}";
  html += ".footer-links a:hover{background-color:#2196F3;color:white;}";
  html += "@media screen and (max-width:768px){body{padding:20px;}.container{width:100%;padding:20px;border-radius:12px;}nav{flex-direction:column;align-items:stretch;gap:10px;}nav a{padding:15px 0;font-size:1.2em;}.intro h2{font-size:2em;}.resources ul li,.routes ul li{font-size:1.1em;padding:10px 0;}.intro .btn,.resources .btn{padding:12px 20px;font-size:1.1em;}}";
  html += "</style></head><body>";

  // Content
  html += "<div class='container'>";
  html += "<header><h1>ESP8266 Weather Station API</h1><p>Monitor weather and air quality with real-time sensor data</p></header>";

  html += "<nav><a href='/'>Home</a><a href='/docs'>API Docs</a><a href='https://github.com/fSocietyDeveloper/esp8266-weather-station' target='_blank'>GitHub</a><a href='/donate'>Support Us</a></nav>";

  html += "<main>";

  html += "<section class='intro'><h2>Welcome to the ESP8266 Weather Station API</h2><p>This API provides real-time data from IoT sensors, including temperature, humidity, and air quality data.</p><div><a href='https://github.com/fSocietyDeveloper/esp8266-weather-station' class='btn' target='_blank'>View on GitHub</a><a href='/docs' class='btn'>Read Docs</a></div></section>";

  html += "<section class='about'><h2>Why Use Our API?</h2><p>Our API provides real-time environmental data captured by various sensors, perfect for IoT applications, weather monitoring, and air quality analysis. It's simple, fast, and easy to integrate into your projects.</p></section>";

  html += "<section class='resources'><h2>Available Resources</h2><ul><li><a href='/docs#temperature'>Temperature</a><span> Get current temperature data</span></li><li><a href='/docs#humidity'>Humidity</a><span> Get current humidity levels</span></li><li><a href='/docs#air-quality'>Air Quality</a><span> Get air quality data from MQ-2 sensor</span></li></ul><a href='/docs' class='btn'>View Detailed API Docs</a></section>";

  html += "<section class='routes'><h2>API Routes</h2><ul><li><span>GET</span> /sensor: Get all sensor data</li><li><span>GET</span> /sensor/temperature: Get temperature data</li><li><span>GET</span> /sensor/humidity: Get humidity data</li><li><span>GET</span> /sensor/air-quality: Get air quality data</li></ul></section>";

  html += "</main>";

  html += "<footer><p>Made with <span>&hearts;</span> by <a href='https://github.com/fSocietyDeveloper' target='_blank'>fSociety Developer</a></p><div class='footer-links'><a href='/donate'>Support Us</a><a href='https://github.com/fSocietyDeveloper/esp8266-weather-station' target='_blank'>GitHub</a></div></footer>";

  html += "</div>";

  html += "</body></html>";

  server.send(200, "text/html", html);
}



void handleSensor() {
  String json = "{";
  json += "\"temperature\":" + String(temperature, 1) + ",";  // Temperature
  json += "\"humidity\":" + String(humidity, 1) + ",";  // Humidity
  json += "\"air_quality\":" + String(air_quality);  // Air quality
  json += "}";

  // Add CORS header to allow access from any origin
  server.sendHeader("Access-Control-Allow-Origin", "*");

  // Send the JSON response with proper content type
  server.send(200, "application/json", json);
}